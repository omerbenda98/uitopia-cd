# Cluster Outputs
output "cluster_name" {
  description = "Name of the EKS cluster"
  value       = aws_eks_cluster.cluster.name
}

output "cluster_arn" {
  description = "The Amazon Resource Name (ARN) of the cluster"
  value       = aws_eks_cluster.cluster.arn
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = aws_eks_cluster.cluster.endpoint
}

output "cluster_version" {
  description = "The Kubernetes version for the cluster"
  value       = aws_eks_cluster.cluster.version
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = aws_eks_cluster.cluster.vpc_config[0].cluster_security_group_id
}

output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster"
  value       = aws_iam_role.cluster.name
}

output "cluster_iam_role_arn" {
  description = "IAM role ARN associated with EKS cluster"
  value       = aws_iam_role.cluster.arn
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = aws_eks_cluster.cluster.certificate_authority[0].data
}

# Node Group Outputs
output "node_group_arn" {
  description = "Amazon Resource Name (ARN) of the EKS Node Group"
  value       = aws_eks_node_group.node_group.arn
}

output "node_group_status" {
  description = "Status of the EKS Node Group"
  value       = aws_eks_node_group.node_group.status
}

output "node_group_capacity_type" {
  description = "Type of capacity associated with the EKS Node Group"
  value       = aws_eks_node_group.node_group.capacity_type
}

output "node_group_instance_types" {
  description = "List of instance types associated with the EKS Node Group"
  value       = aws_eks_node_group.node_group.instance_types
}

output "node_group_iam_role_name" {
  description = "IAM role name associated with EKS node group"
  value       = aws_iam_role.node_group.name
}

output "node_group_iam_role_arn" {
  description = "IAM role ARN associated with EKS node group"
  value       = aws_iam_role.node_group.arn
}

# OIDC Provider Outputs
output "oidc_provider_arn" {
  description = "The ARN of the OIDC Provider if enabled"
  value       = aws_iam_openid_connect_provider.cluster.arn
}

output "oidc_provider_url" {
  description = "The URL of the OIDC Provider"
  value       = aws_iam_openid_connect_provider.cluster.url
}

# EBS CSI Driver Outputs
output "ebs_csi_driver_role_arn" {
  description = "ARN of the EBS CSI driver IAM role"
  value       = aws_iam_role.ebs_csi_driver.arn
}

output "ebs_csi_addon_arn" {
  description = "ARN of the EBS CSI driver addon"
  value       = aws_eks_addon.ebs_csi_driver.arn
}

# VPC Outputs
output "vpc_id" {
  description = "ID of the VPC where the cluster and workers are deployed"
  value       = local.vpc_id
}

output "private_subnet_ids" {
  description = "List of IDs of private subnets"
  value       = local.private_subnet_ids
}

output "public_subnet_ids" {
  description = "List of IDs of public subnets"
  value       = local.public_subnet_ids
}

# Kubectl Configuration
output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/kubeconfig.tpl", {
    cluster_name           = aws_eks_cluster.cluster.name
    endpoint              = aws_eks_cluster.cluster.endpoint
    region                = var.aws_region
    certificate_authority = aws_eks_cluster.cluster.certificate_authority[0].data
  })
  sensitive = true
}

# Commands for connecting to cluster
output "configure_kubectl" {
  description = "Configure kubectl: make sure you're logged in with the correct AWS profile and run the following command to update your kubeconfig"
  value       = "aws eks --region ${var.aws_region} update-kubeconfig --name ${aws_eks_cluster.cluster.name}"
}

# Ingress Controller Information
output "ingress_nginx_install_command" {
  description = "Command to install NGINX Ingress Controller"
  value       = "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml"
}

# Application Deployment Commands
output "apply_manifests_command" {
  description = "Command to apply your application manifests"
  value       = "kubectl apply -f ../k8s/deploy.yaml"
}

# Useful commands
output "useful_commands" {
  description = "Useful commands for managing the cluster"
  value = {
    get_nodes           = "kubectl get nodes"
    get_pods_all        = "kubectl get pods -A"
    get_ingress         = "kubectl get ingress -A"
    get_services        = "kubectl get svc -A"
    describe_cluster    = "aws eks describe-cluster --name ${aws_eks_cluster.cluster.name} --region ${var.aws_region}"
    get_nodegroup       = "aws eks describe-nodegroup --cluster-name ${aws_eks_cluster.cluster.name} --nodegroup-name ${aws_eks_node_group.node_group.node_group_name} --region ${var.aws_region}"
  }
}